CREATE TABLE Servers (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    ip_address INET NOT NULL UNIQUE,
    os VARCHAR(50) NOT NULL,
    status VARCHAR(20) NOT NULL CHECK (status IN ('Active', 'Inactive', 'Maintenance')),
    location_id INT NOT NULL,
    FOREIGN KEY (location_id) REFERENCES Locations(id)
);
CREATE TABLE Users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    role VARCHAR(50) NOT NULL CHECK (role IN ('Admin', 'Engineer', 'User')),
    department_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES Departments(id)
);
CREATE TABLE Logs (
    id SERIAL PRIMARY KEY,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_id INT NOT NULL,
    server_id INT,
    network_device_id INT,
    action TEXT NOT NULL CHECK (LENGTH(action) > 5),
    FOREIGN KEY (user_id) REFERENCES Users(id),
    FOREIGN KEY (server_id) REFERENCES Servers(id),
    FOREIGN KEY (network_device_id) REFERENCES NetworkDevices(id)
);
CREATE TABLE Configurations (
    id SERIAL PRIMARY KEY,
    server_id INT NOT NULL,
    parameter VARCHAR(50) NOT NULL,
    value VARCHAR(100) NOT NULL,
    UNIQUE (server_id, parameter),
    FOREIGN KEY (server_id) REFERENCES Servers(id)
);
CREATE TABLE NetworkDevices (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    ip_address INET NOT NULL UNIQUE,
    device_type VARCHAR(50) NOT NULL CHECK (device_type IN ('Router', 'Switch', 'Firewall')),
    status VARCHAR(20) NOT NULL CHECK (status IN ('Online', 'Offline', 'Maintenance'))
);
CREATE TABLE Incidents (
    id SERIAL PRIMARY KEY,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    server_id INT,
    network_device_id INT,
    description TEXT NOT NULL CHECK (LENGTH(description) > 10),
    status VARCHAR(20) NOT NULL CHECK (status IN ('Open', 'Resolved', 'Closed')),
    FOREIGN KEY (server_id) REFERENCES Servers(id),
    FOREIGN KEY (network_device_id) REFERENCES NetworkDevices(id)
);
CREATE TABLE Backups (
    id SERIAL PRIMARY KEY,
    server_id INT NOT NULL,
    backup_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    backup_status VARCHAR(20) NOT NULL CHECK (backup_status IN ('Success', 'Failed', 'In Progress')),
    FOREIGN KEY (server_id) REFERENCES Servers(id)
);
CREATE TABLE Tasks (
    id SERIAL PRIMARY KEY,
    assigned_to INT NOT NULL,
    description TEXT NOT NULL CHECK (LENGTH(description) > 5),
    status VARCHAR(20) NOT NULL DEFAULT 'Pending' CHECK (status IN ('Pending', 'In Progress', 'Completed')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (assigned_to) REFERENCES Users(id)
);
CREATE TABLE NetworkInterfaces (
    id SERIAL PRIMARY KEY,
    server_id INT NOT NULL,
    interface_name VARCHAR(50) NOT NULL,
    ip_address INET NOT NULL UNIQUE,
    mac_address VARCHAR(17) NOT NULL UNIQUE CHECK (mac_address ~ '^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$'),
    FOREIGN KEY (server_id) REFERENCES Servers(id)
);
CREATE TABLE FirewallRules (
    id SERIAL PRIMARY KEY,
    server_id INT NOT NULL,
    rule TEXT NOT NULL CHECK (LENGTH(rule) > 10),
    FOREIGN KEY (server_id) REFERENCES Servers(id)
);
CREATE TABLE NetworkTraffic (
    id SERIAL PRIMARY KEY,
    server_id INT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    incoming_traffic NUMERIC(10,2) NOT NULL CHECK (incoming_traffic >= 0),
    outgoing_traffic NUMERIC(10,2) NOT NULL CHECK (outgoing_traffic >= 0),
    FOREIGN KEY (server_id) REFERENCES Servers(id)
);
CREATE TABLE Locations (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    address TEXT NOT NULL CHECK (LENGTH(address) > 10)
);
CREATE TABLE Departments (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE
);
CREATE TABLE ServiceContracts (
    id SERIAL PRIMARY KEY,
    provider_name VARCHAR(100) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL CHECK (end_date > start_date)
);
CREATE TABLE Software (
    id SERIAL PRIMARY KEY,
    server_id INT NOT NULL,
    name VARCHAR(100) NOT NULL,
    version VARCHAR(50) NOT NULL DEFAULT '1.0',
    FOREIGN KEY (server_id) REFERENCES Servers(id)
);
CREATE TABLE AccessControl (
    id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    server_id INT NOT NULL,
    access_level VARCHAR(20) NOT NULL CHECK (access_level IN ('Read', 'Write', 'Admin')),
    FOREIGN KEY (user_id) REFERENCES Users(id),
    FOREIGN KEY (server_id) REFERENCES Servers(id),
    UNIQUE (user_id, server_id)
);


CREATE USER admin WITH ENCRYPTED PASSWORD 'admin_pass';
CREATE USER operator WITH ENCRYPTED PASSWORD 'operator_pass';
CREATE USER viewer WITH ENCRYPTED PASSWORD 'viewer_pass';

CREATE ROLE admin_role;
CREATE ROLE operator_role;
CREATE ROLE viewer_role;

GRANT CONNECT, CREATE ON DATABASE ServerNetManagement TO admin_role;
GRANT CONNECT ON DATABASE ServerNetManagement TO operator_role;
GRANT CONNECT ON DATABASE ServerNetManagement TO viewer_role;

GRANT admin_role TO admin;
GRANT operator_role TO operator;
GRANT viewer_role TO viewer;

SELECT rolname, rolsuper, rolcreatedb, rolcreaterole, rolcanlogin
FROM pg_roles;

INSERT INTO Locations (id, name, address) VALUES
(1, 'ЦОД Алматы', 'пр. Назарбаева, 233, Алматы, Казахстан'),
(2, 'ЦОД Астана', 'ул. Сарыарка, 15, Астана, Казахстан'),
(3, 'ЦОД Шымкент', 'ул. Аль-Фараби, 102, Шымкент, Казахстан'),
(4, 'ЦОД Караганда', 'пр. Бухар Жырау, 47, Караганда, Казахстан'),
(5, 'ЦОД Атырау', 'ул. Курмангазы, 89, Атырау, Казахстан');

INSERT INTO Departments (id, name) VALUES
(1, 'Отдел системного администрирования'),
(2, 'Сетевой отдел'),
(3, 'Отдел информационной безопасности'),
(4, 'Отдел разработки и поддержки ПО'),
(5, 'Аналитический отдел');

INSERT INTO Servers (id, name, ip_address, os, status, location_id) VALUES
(1, 'Almaty-DB-Server', '10.10.1.10', 'Ubuntu Server 22.04', 'Active', 1),
(2, 'Astana-Web-Server', '10.20.2.20', 'Windows Server 2019', 'Active', 2),
(3, 'Shymkent-Proxy-01', '10.30.3.30', 'Debian 11', 'Maintenance', 3),
(4, 'Karaganda-Backup-01', '10.40.4.40', 'CentOS 8', 'Inactive', 4),
(5, 'Atyrau-ERP-Server', '10.50.5.50', 'Red Hat Enterprise Linux', 'Active', 5);

INSERT INTO NetworkDevices (id, name, ip_address, device_type, status) VALUES
(1, 'Almaty-Core-Router', '10.10.1.1', 'Router', 'Online'),
(2, 'Astana-Distribution-Switch', '10.20.2.1', 'Switch', 'Online'),
(3, 'Shymkent-Firewall-01', '10.30.3.1', 'Firewall', 'Offline'),
(4, 'Karaganda-Core-Router', '10.40.4.1', 'Router', 'Maintenance'),
(5, 'Atyrau-Access-Switch', '10.50.5.1', 'Switch', 'Online');

INSERT INTO Users (id, username, email, role, department_id, created_at) VALUES
(1, 's_erzhan', 's.erzhan@company.kz', 'Admin', 1, NOW()),
(2, 'm_dina', 'm.dina@company.kz', 'Engineer', 2, NOW()),
(3, 't_askar', 't.askar@company.kz', 'User', 3, NOW()),
(4, 'y_karina', 'y.karina@company.kz', 'Admin', 4, NOW()),
(5, 'n_alikhan', 'n.alikhan@company.kz', 'Engineer', 5, NOW()),
(6, 'o_ruslan', 'o.ruslan@company.kz', 'User', 1, NOW()),
(7, 'a_meruert', 'a.meruert@company.kz', 'Engineer', 2, NOW()),
(8, 'k_sanzhar', 'k.sanzhar@company.kz', 'User', 3, NOW()),
(9, 'd_ayana', 'd.ayana@company.kz', 'Admin', 4, NOW()),
(10, 'b_adilet', 'b.adilet@company.kz', 'Engineer', 5, NOW()),
(11, 'r_zhanel', 'r.zhanel@company.kz', 'User', 1, NOW()),
(12, 'g_madiyar', 'g.madiyar@company.kz', 'Engineer', 2, NOW()),
(13, 'e_samat', 'e.samat@company.kz', 'User', 3, NOW()),
(14, 'z_madina', 'z.madina@company.kz', 'Admin', 4, NOW()),
(15, 't_abay', 't.abay@company.kz', 'Engineer', 5, NOW());

INSERT INTO Tasks (assigned_to, description, status, created_at) VALUES
(1, 'Обновить серверные пакеты безопасности', 'Pending', NOW()),
(2, 'Настроить VPN-соединение для удаленных пользователей', 'In Progress', NOW()),
(3, 'Проверить журналы брандмауэра на наличие аномалий', 'Completed', NOW()),
(4, 'Оптимизировать использование ресурсов сервера базы данных', 'Pending', NOW()),
(5, 'Настроить мониторинг сетевого трафика', 'In Progress', NOW()),
(6, 'Перенести серверные логи в облачное хранилище', 'Pending', NOW()),
(7, 'Проверить обновления антивирусной системы', 'Completed', NOW()),
(8, 'Провести аудит доступа к серверам', 'In Progress', NOW()),
(9, 'Обновить сертификаты SSL на веб-серверах', 'Pending', NOW()),
(10, 'Настроить автоматическое резервное копирование', 'Completed', NOW());

INSERT INTO AccessControl (user_id, server_id, access_level) VALUES
(1, 1, 'Admin'),
(2, 2, 'Read'),
(3, 3, 'Write'),
(4, 4, 'Admin'),
(5, 5, 'Write'),
(6, 1, 'Read'),
(7, 2, 'Write'),
(8, 3, 'Admin'),
(9, 4, 'Read'),
(10, 5, 'Write'),
(11, 1, 'Admin'),
(12, 2, 'Read'),
(13, 3, 'Write'),
(14, 4, 'Admin'),
(15, 5, 'Read');

INSERT INTO Incidents (timestamp, server_id, network_device_id, description, status) VALUES
(NOW(), 1, 1, 'DDoS-атака на веб-сервер', 'Open'),
(NOW(), 2, 2, 'Проблема с маршрутизацией', 'Resolved'),
( NOW(), 3, 3, 'Попытка несанкционированного доступа', 'Open'),
(NOW(), 4, 4, 'Сбой сетевого интерфейса', 'Closed'),
(NOW(), 5, 5, 'Высокая нагрузка на CPU', 'Open'),
(NOW(), 1, 2, 'Обрыв соединения с дата-центром', 'Open'),
(NOW(), 2, 3, 'Флуд на DNS-сервер', 'Resolved'),
(NOW(), 3, 4, 'Вирусная активность на сервере', 'Open'),
(NOW(), 4, 5, 'Проблемы с загрузкой системы', 'Closed'),
(NOW(), 5, 1, 'Ошибка авторизации пользователей', 'Open');

INSERT INTO Logs (timestamp, user_id, server_id, network_device_id, action) VALUES
(NOW(), 1, 1, 1, 'Вход администратора в систему'),
(NOW(), 2, 2, 2, 'Изменение конфигурации сетевого устройства'),
(NOW(), 3, 3, NULL, 'Обнаружена попытка несанкционированного доступа'),
(NOW(), 4, NULL, 4, 'Сетевое устройство перешло в режим обслуживания'),
(NOW(), 5, 5, NULL, 'Перезапуск веб-сервера'),
(NOW(), 6, 1, 2, 'Обновление политики безопасности'),
(NOW(), 7, 2, NULL, 'Создание резервной копии данных'),
(NOW(), 8, 3, 3, 'Изменение параметров брандмауэра'),
(NOW(), 9, NULL, 4, 'Обнаружена аномальная активность в сети'),
(NOW(), 10, 5, NULL, 'Обновление операционной системы сервера');

INSERT INTO NetworkTraffic (server_id, timestamp, incoming_traffic, outgoing_traffic) VALUES
(1, NOW(), 120.5, 85.3),
(2, NOW(), 98.7, 105.4),
(3, NOW(), 210.2, 180.6),
(4, NOW(), 35.9, 25.4),
(5, NOW(), 300.8, 290.1),
(1, NOW(), 150.3, 130.2),
(2, NOW(), 110.6, 120.9),
(3, NOW(), 230.5, 195.4),
(4, NOW(), 40.2, 30.1),
(5, NOW(), 310.7, 305.2);

INSERT INTO FirewallRules (server_id, rule) VALUES
(1, 'ALLOW TCP 80, 443 from all networks'),
(2, 'ALLOW UDP 53 for internal DNS servers'),
(3, 'BLOCK ALL incoming connections from 192.168.3.100'),
(4, 'ALLOW ICMP ping requests from trusted sources'),
(5, 'BLOCK ALL connections from private network 10.0.0.0/8'),
(1, 'ALLOW SSH access from 192.168.1.0/24 subnet'),
(2, 'ALLOW RDP traffic from trusted subnet 192.168.2.0/24'),
(3, 'BLOCK MALICIOUS IP range 203.0.113.50/24'),
(4, 'ALLOW SMTP mail traffic on port 25 for outgoing emails'),
(5, 'BLOCK TELNET access on port 23 to prevent unauthorized access');

INSERT INTO NetworkInterfaces (server_id, interface_name, ip_address, mac_address) VALUES
(1, 'eth0', '10.10.1.10', '00:1A:2B:3C:4D:5E'),
(2, 'eth0', '10.20.2.20', '00:1A:2B:3C:4D:5F'),
(3, 'eth1', '10.30.3.30', '00:1A:2B:3C:4D:60'),
(4, 'eth1', '10.40.4.40', '00:1A:2B:3C:4D:61'),
(5, 'eth2', '10.50.5.50', '00:1A:2B:3C:4D:62'),
(1, 'eth1', '10.10.1.11', '00:1A:2B:3C:4D:6A'),
(2, 'eth1', '10.20.2.21', '00:1A:2B:3C:4D:6B'),
(3, 'eth2', '10.30.3.31', '00:1A:2B:3C:4D:6C'),
(4, 'eth2', '10.40.4.41', '00:1A:2B:3C:4D:6D'),
(5, 'eth3', '10.50.5.51', '00:1A:2B:3C:4D:6E');

INSERT INTO Software (server_id, name, version) VALUES
(1, 'PostgreSQL', '15.2'),
(2, 'Apache Tomcat', '9.0.58'),
(3, 'Squid Proxy', '5.2'),
(4, 'MariaDB', '10.6'),
(5, 'SAP ERP', '7.5'),
(1, 'NGINX', '1.22.1'),
(2, 'Docker', '24.0.2'),
(3, 'OpenVPN', '2.5.7'),
(4, 'ElasticSearch', '8.10.2'),
(5, 'Redis', '7.0.5');

INSERT INTO Configurations (server_id, parameter, value) VALUES
(1, 'CPU', 'Intel Xeon E5-2678 v3'),
(1, 'RAM', '64GB DDR4'),
(2, 'CPU', 'AMD EPYC 7551'),
(2, 'RAM', '128GB DDR4'),
(3, 'Firewall', 'Enabled'),
(3, 'Backup Schedule', 'Daily'),
(4, 'CPU', 'Intel Xeon E5-2690 v4'),
(4, 'RAM', '32GB DDR3'),
(5, 'OS Version', 'RHEL 8.6'),
(5, 'Max Connections', '1000'),
(1, 'Storage', '2TB SSD'),
(2, 'Database', 'PostgreSQL 15'),
(3, 'Cache', 'Redis 7.0'),
(4, 'Monitoring', 'Zabbix 6.0'),
(5, 'Logging', 'ELK Stack');

INSERT INTO ServiceContracts (provider_name, start_date, end_date, server_id) VALUES
('Almaty Data Center', '2024-01-15', '2025-01-15', 1),
('Astana IT Solutions', '2024-02-10', '2025-02-10', 2),
('Shymkent Cloud Services', '2024-03-05', '2025-03-05', 3),
('Karaganda Tech Group', '2024-04-20', '2025-04-20', 4),
('Atyrau Hosting', '2024-05-25', '2025-05-25', 5),
('Almaty Cloud Security', '2024-06-10', '2025-06-10', 1),
('Astana Cyber Defense', '2024-07-01', '2025-07-01', 2),
('Shymkent IT Support', '2024-08-18', '2025-08-18', 3),
('Karaganda Backup Solutions', '2024-09-07', '2025-09-07', 4),
('Atyrau Server Maintenance', '2024-10-30', '2025-10-30', 5);

INSERT INTO Backups (server_id, backup_date, backup_status) VALUES
(1, '2024-03-01 02:00:00', 'Success'),
(2, '2024-03-02 03:30:00', 'Failed'),
(3, '2024-03-03 04:45:00', 'Success'),
(4, '2024-03-04 01:15:00', 'In Progress'),
(5, '2024-03-05 00:10:00', 'Success'),
(1, '2024-03-06 02:30:00', 'Success'),
(2, '2024-03-07 03:45:00', 'Success'),
(3, '2024-03-08 05:00:00', 'Failed'),
(4, '2024-03-09 01:25:00', 'Success'),
(5, '2024-03-10 00:40:00', 'Success');

SELECT u.username, u.role, s.name AS server_name, a.access_level
FROM Users u
JOIN AccessControl a ON u.id = a.user_id
JOIN Servers s ON a.server_id = s.id
ORDER BY u.role, s.name;

SELECT s.name AS server_name,
       SUM(n.incoming_traffic) AS total_incoming,
       SUM(n.outgoing_traffic) AS total_outgoing
FROM Servers s
JOIN NetworkTraffic n ON s.id = n.server_id
WHERE n.timestamp >= NOW() - INTERVAL '7 days'
GROUP BY s.name
ORDER BY total_incoming DESC;

SELECT u.username, t.description AS task, t.status, s.name AS server
FROM Users u
JOIN Tasks t ON u.id = t.assigned_to
JOIN AccessControl a ON u.id = a.user_id
JOIN Servers s ON a.server_id = s.id
WHERE t.status = 'In Progress'
ORDER BY u.username;

SELECT s.name AS server_name, COUNT(i.id) AS incident_count
FROM Servers s
JOIN Incidents i ON s.id = i.server_id
GROUP BY s.name
ORDER BY incident_count DESC
LIMIT 3;

SELECT s.name AS server_name
FROM Servers s
LEFT JOIN Backups b ON s.id = b.server_id
                     AND b.backup_date >= NOW() - INTERVAL '30 days'
WHERE b.id IS NULL;
